#!/usr/bin/env node

import { Command } from 'commander';
import inquirer from 'inquirer';
import chalk from 'chalk';
import fs from 'fs-extra';
import path from 'path';

const program = new Command();

interface ThemeConfig {
  name: string;
  type: 'light' | 'dark' | 'custom';
  baseTheme?: string;
  colors: Record<string, string>;
}

program
  .command('theme')
  .alias('t')
  .description('Generate custom theme configuration')
  .option('-n, --name <name>', 'Theme name')
  .option('-t, --type <type>', 'Theme type (light|dark|custom)')
  .option('-b, --base <base>', 'Base theme to extend')
  .action(async (options) => {
    try {
      const config = await getThemeConfig(options);
      await generateTheme(config);
      
      console.log(chalk.green('‚úÖ Theme generated successfully!'));
      console.log(chalk.blue('üìÅ Files created:'));
      console.log(chalk.gray(`   themes/${config.name}.ts`));
      
    } catch (error) {
      console.error(chalk.red('‚ùå Error generating theme:'), error);
      process.exit(1);
    }
  });

async function getThemeConfig(options: any): Promise<ThemeConfig> {
  const questions = [];
  
  if (!options.name) {
    questions.push({
      type: 'input',
      name: 'name',
      message: 'Theme name:',
      validate: (input: string) => {
        if (!input) return 'Theme name is required';
        if (!/^[a-z][a-z0-9-]*$/.test(input)) {
          return 'Theme name must be kebab-case (e.g., my-theme)';
        }
        return true;
      }
    });
  }
  
  if (!options.type) {
    questions.push({
      type: 'list',
      name: 'type',
      message: 'Theme type:',
      choices: [
        { name: 'Light - Light color scheme', value: 'light' },
        { name: 'Dark - Dark color scheme', value: 'dark' },
        { name: 'Custom - Custom color scheme', value: 'custom' },
      ]
    });
  }
  
  const answers = await inquirer.prompt(questions);
  
  const colorQuestions = await inquirer.prompt([
    {
      type: 'input',
      name: 'primary',
      message: 'Primary color (hex):',
      default: answers.type === 'dark' ? '#1890ff' : '#0066cc',
      validate: (input: string) => /^#[0-9A-Fa-f]{6}$/.test(input) || 'Must be a valid hex color'
    },
    {
      type: 'input',
      name: 'secondary',
      message: 'Secondary color (hex):',
      default: answers.type === 'dark' ? '#722ed1' : '#6b46c1',
      validate: (input: string) => /^#[0-9A-Fa-f]{6}$/.test(input) || 'Must be a valid hex color'
    },
    {
      type: 'input',
      name: 'background',
      message: 'Background color (hex):',
      default: answers.type === 'dark' ? '#1a1a1a' : '#ffffff',
      validate: (input: string) => /^#[0-9A-Fa-f]{6}$/.test(input) || 'Must be a valid hex color'
    },
    {
      type: 'input',
      name: 'surface',
      message: 'Surface color (hex):',
      default: answers.type === 'dark' ? '#2a2a2a' : '#f5f5f5',
      validate: (input: string) => /^#[0-9A-Fa-f]{6}$/.test(input) || 'Must be a valid hex color'
    }
  ]);
  
  return {
    name: options.name || answers.name,
    type: options.type || answers.type,
    baseTheme: options.base,
    colors: colorQuestions,
  };
}

async function generateTheme(config: ThemeConfig): Promise<void> {
  const themeContent = `/**
 * ${config.name} Theme Configuration
 * Generated by @whttlr/ui-cli
 */

import { ThemeConfig } from '@whttlr/ui-theme';

export const ${camelCase(config.name)}Theme: ThemeConfig = {
  name: '${config.name}',
  type: '${config.type}',
  colors: {
    primary: {
      50: '${lighten(config.colors.primary, 0.9)}',
      100: '${lighten(config.colors.primary, 0.8)}',
      200: '${lighten(config.colors.primary, 0.6)}',
      300: '${lighten(config.colors.primary, 0.4)}',
      400: '${lighten(config.colors.primary, 0.2)}',
      500: '${config.colors.primary}',
      600: '${darken(config.colors.primary, 0.1)}',
      700: '${darken(config.colors.primary, 0.2)}',
      800: '${darken(config.colors.primary, 0.3)}',
      900: '${darken(config.colors.primary, 0.4)}',
    },
    secondary: {
      50: '${lighten(config.colors.secondary, 0.9)}',
      100: '${lighten(config.colors.secondary, 0.8)}',
      200: '${lighten(config.colors.secondary, 0.6)}',
      300: '${lighten(config.colors.secondary, 0.4)}',
      400: '${lighten(config.colors.secondary, 0.2)}',
      500: '${config.colors.secondary}',
      600: '${darken(config.colors.secondary, 0.1)}',
      700: '${darken(config.colors.secondary, 0.2)}',
      800: '${darken(config.colors.secondary, 0.3)}',
      900: '${darken(config.colors.secondary, 0.4)}',
    },
    background: '${config.colors.background}',
    surface: '${config.colors.surface}',
    text: {
      primary: '${config.type === 'dark' ? '#ffffff' : '#000000'}',
      secondary: '${config.type === 'dark' ? '#b3b3b3' : '#666666'}',
      disabled: '${config.type === 'dark' ? '#666666' : '#cccccc'}',
    },
    border: '${config.type === 'dark' ? '#404040' : '#e0e0e0'}',
  },
  shadows: {
    sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
    md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
    lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
    xl: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
  },
  spacing: {
    xs: '0.25rem',
    sm: '0.5rem',
    md: '1rem',
    lg: '1.5rem',
    xl: '2rem',
    '2xl': '3rem',
  },
  borderRadius: {
    none: '0',
    sm: '0.125rem',
    md: '0.375rem',
    lg: '0.5rem',
    xl: '0.75rem',
    full: '9999px',
  },
  typography: {
    fontFamily: {
      sans: ['Inter', 'system-ui', 'sans-serif'],
      mono: ['Fira Code', 'monospace'],
    },
    fontSize: {
      xs: '0.75rem',
      sm: '0.875rem',
      md: '1rem',
      lg: '1.125rem',
      xl: '1.25rem',
      '2xl': '1.5rem',
      '3xl': '1.875rem',
    },
    fontWeight: {
      normal: '400',
      medium: '500',
      semibold: '600',
      bold: '700',
    },
  },
};

export default ${camelCase(config.name)}Theme;
`;

  const themePath = path.resolve(process.cwd(), 'themes');
  await fs.ensureDir(themePath);
  await fs.writeFile(path.join(themePath, `${config.name}.ts`), themeContent);
}

function camelCase(str: string): string {
  return str.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
}

function lighten(color: string, amount: number): string {
  // Simple color lightening - would use a proper color library in production
  const hex = color.replace('#', '');
  const num = parseInt(hex, 16);
  const r = Math.min(255, Math.floor((num >> 16) + (255 - (num >> 16)) * amount));
  const g = Math.min(255, Math.floor(((num >> 8) & 0x00FF) + (255 - ((num >> 8) & 0x00FF)) * amount));
  const b = Math.min(255, Math.floor((num & 0x0000FF) + (255 - (num & 0x0000FF)) * amount));
  return `#${((r << 16) | (g << 8) | b).toString(16).padStart(6, '0')}`;
}

function darken(color: string, amount: number): string {
  // Simple color darkening - would use a proper color library in production
  const hex = color.replace('#', '');
  const num = parseInt(hex, 16);
  const r = Math.floor((num >> 16) * (1 - amount));
  const g = Math.floor(((num >> 8) & 0x00FF) * (1 - amount));
  const b = Math.floor((num & 0x0000FF) * (1 - amount));
  return `#${((r << 16) | (g << 8) | b).toString(16).padStart(6, '0')}`;
}

export default program;